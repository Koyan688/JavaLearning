{static}：
	1.static声明的成员变量为静态成员变量，也称类变量；
	2.static声明的变量和方法从属于类，普通变量和方法从属于对象；	3.类变量生命周期和类相同，在整个应用执行期间都有效；
	4.普通方法体可以调用类变量和类方法，类方法不能调用普通方法和普通变量；
{静态代码块}：
	1.在类加载时就被运行了，而且只运行一次，优先级高于各种代码块以及构造方法；
	2.如果需要在项目启动时执行某些代码，这时就需要静态代码块，也叫静态初始化块；
	3.静态初始化块和构造方法(里的super方法)都会追溯到Object类，再沿着继承树依次向下执行每个类的静态初始化块和构造方法。
{参数传值}：
	1.基本数据类型参数：形参改变只在调用方法内生效，不影响实参，和C语言相同；
	2.引用类型参数：传递的是对象的地址，形参引用对象属性并改变属性值时，会影响实参的对象属性值；但若对形参进行new对象操作时，系统则会将新建对象的地址赋给形参，这种情况下不会影响实参属性值。
{继承extends}：
	1.extends继承父类的所有属性和方法（但不包括父类的构造方法）；
	2.所有无声明继承关系的类都继承于java.lang包里的Object类；
	3.x instanceof y用于检测x对象是否从属于y类，或从属于y类的子类，
	并返回bull值；
{override方法重写}：
	1.子类中重写父类的方法称为override；
	2.三个要点：① “==” 方法名、形参列表相同；
			   ② “<=” 返回值类型和声明异常类型，子类小于父类；
			   ③ “>=” 访问权限，子类大于父类；
{Object类的toString方法}：
	1.return getClass().getName() + "@" + Integer.toHexString(hashCode());
	//类名@对象的'无符号16进制'哈希码
	2.应用过程中通常会改写toString方法
！{Object类的equals方法}：
	0.“==”如果是基本类型变量则表示值相等，如果是引用类型变量则表示是否同一个地址（同一个对象）；
	1.返回两对象是否相等的bool值；
	2.String类重写的equals判断两字符串是否相等；
{super方法}：
	1.用于调用父类的属性和方法；
	2.构造方法的第一句默认有super()，调用父类的构造方法；
	3.super()的存在，使得new对象时，先向下追溯到Object类，然后再依次向下执行类的构造方法，直到当前子类为止；
{访问控制符}：
	1.private:只有自己类；
	2.default:自己类、同包类；
	3.protected:自己类、同包类、不同包的子类；
	4.public:所有类；
	5.若未声明，默认为default；
{javabean}：
	1.这个java类必须具有一个无参数的构造方法；
	2.属性必须private修饰；
	3.用public修饰的get/set方法暴露给其他类，用以属性的赋值和获取；
{多态}：
	1.多态=继承+方法重写+父类引用参数；
{对象转型}：
	1.向上自动转型，如：Animal a = new Dog();
	2.向下强制转型，如：Dog d = (Dog) a；
{final}：
	1.修饰变量：变量值不能被改变；
	2.修饰方法：方法不能被重写；
	3.修饰类：类不能被继承；
{abstract}：
	1.抽象方法必须包含在抽象类中，即该类必须被abstract修饰；
	2.抽象类及其构造方法不能实例化；
	3.抽象方法没有方法体，只有声明；
	3.抽象方法必须在其子类被重写实现；
	4.抽象方法可用于规范子类，使该重写的方法和父类保持一样的参数列表和返回类型；
{interfance}：
	1.接口中定义的变量默认“public”、“static”、“final”修饰；方法默认“public”、“abstract”；
	2.接口可以多继承，类只能单继承；
	3.接口用于规范，使编程更高效化、标准化；
{内部类}：
	1.成员内部类、匿名内部类、局部内部类；
	2.成员内部类分为静态和非静态，内部类可对外部类的成员进行访问（包括private成员），"Outer.this.变量"，外部类不能访问内部类变量；
	3.新建非静态内部类对象："Outer.Inner inner = new Outer().new Inner();"
	4.静态内部类看做外部类的成员变量；新建对象方式为："Outer.Inner inner = new Outer.Inner();"
	5.匿名内部类语法：
	 	调用方法名(new interface(){
	 	//重写方法体
	 	});
	6.局部内部类在方法体内声明类和建对象及调用，很少用；
{String}：
	1.String类又称不可变字符序列；
	2.java字符创是Unicode字符序列；
	3.直接赋值String类的对象地址都位于常量池中，若字符串内容一致则对象地址一致，(str1 == str2);使用new创建的String对象地址不位于常量池中；因此，在字符串比较时，用equals方法较为稳妥；